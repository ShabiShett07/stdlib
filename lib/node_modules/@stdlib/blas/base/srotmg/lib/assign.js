/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var absf = require( '@stdlib/math/base/special/absf' );
var sqrtf = require( '@stdlib/math/base/special/sqrtf' );
var isnan  = require( '@stdlib/math/base/assert/is-nan' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var abs2f = require('@stdlib/math/base/special/abs2f');

// MAIN //

/**
* Constructs the parameters for a modified Givens plane rotation.
*
* @param {number} d1 - scaling factor for the first vector component
* @param {number} d2 - scaling factor for the second vector component
* @param {number} x1 - first component of the first vector
* @param {number} y1 - first component of the second vector
* @param {Float32Array} out - output array
* @returns {Float32Array} - output array containing the rotation parameters
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var out = srotmg( -3.0, -4.0, 1.5, 2.5, new Float32Array( 5 ), 1, 0 );
* // returns <Float32Array>[ 0.6, 0.8, 2.0, 1.5, 2.5 ]
*/
function srotmg( d1, d2, x1, y1, out, stride, offset ) {
    var ad1;
    var ad2;
    var c;
    var s;
    var param;
    var r;
    if ( isnan(d1) || isnan(d2) || isnan(x1) || isnan(y1) ){
        c = NaN;
        s = NaN;
        param = NaN;
        x1 = NaN;
        y1 = NaN;
    } else {
        if ( d1 == 0.0 ) {
            c = 0.0;
            s = 1.0;
            x1 = 0.0;
            y1 = 0.0;
            param = 0.0;
        }else{
            ad1 = absf(d1);
            ad2 = absf(d2);
            if ( ad1 > ad2 ) {
                r = float64ToFloat32(d1 * sqrtf(float64ToFloat32(1 + abs2f(float64ToFloat32(d2 / d1)))));
                c = float64ToFloat32(d1 / r);
                s = float64ToFloat32(d2 / r);
                param = 1.0;
            } else {
                r = float64ToFloat32(d2 * sqrtf(float64ToFloat32(1 + abs2f(float64ToFloat32(d1 / d2)))));
                c = float64ToFloat32(d1 / r);
                s = float64ToFloat32(d2 / r);
                param = 2.0;
            }
        }
        if (d2 == 0.0 ) {
            c = 1.0;
            s = 0.0;
            param = 0.0;
        }
    }
    out[ offset ] = c;
    out[ offset + stride ] = s;
    out[ offset + ( 2 * stride ) ] = param;
    out[ offset + ( 3 * stride ) ] = x1;
    out[ offset + ( 4 * stride ) ] = y1;

    return out;
}



// EXPORTS //

module.exports = srotmg;
