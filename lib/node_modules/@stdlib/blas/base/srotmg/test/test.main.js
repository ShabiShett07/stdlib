/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var srotmg = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof srotmg, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 4', function test( t ) {
	t.strictEqual( srotmg.length, 4, 'returns expected value' );
	t.end();
});

tape( 'the function constructs the parameters for a modified Givens plane rotation', function test( t ) {
	var expected;
	var values;
	var out;
	var i;

	expected = [
	    [ 0.8944271802902222, 0.4472135901451111, 1.0, 1.0, 3.0 ],
		[ 0.3162277638912201, 0.9486832618713379, 2.0, -4.0, -5.0 ],
		[ 0.7071067690849304, 0.7071067690849304, 2.0, 2.0, 6.0 ],
		[ 0.6, 0.8, 2.0, -2.0, -4.0 ],
		[ 0.6, 0.8, 2.0, 1.5, 2.5 ],
		[ 0.906183123588562, 0.4228854477405548, 1.0, -1.50, -2.50 ],
		[ 0.4472135901451111, 0.8944271802902222, 2.0, 3.50, -7.50 ],
		[ 0.800000011920929, 0.6000000238418579, 1.0, 4.50, -9.50 ]
	];
	values = [
	  	[ 4.0, 2.0, 1.0, 3.0 ],
		[ 1.0, 3.0, -4.0, -5.0 ],
		[ 5.0, 5.0, 2.0, 6.0 ],
		[ 6.0, 8.0, -2.0, -4.0 ],
		[ -3.0, -4.0, 1.5, 2.5 ],
		[ -7.5, -3.5, -1.5, -2.5 ],
		[ 10.0, 20.0, 3.5, -7.5 ],
		[ -8.0, -6.0, 4.5, -9.5 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		expected[i] = new Float32Array( expected[i] );
		out = srotmg( float64ToFloat32( values[i][0] ), float64ToFloat32( values[i][1] ), float64ToFloat32( values[i][2] ), float64ToFloat32( values[i][3] ) , out, 1, 0 ); // eslint-disable-line max-len
		t.deepEqual( out, expected[i], 'returns expected value' );
	}
	t.end();
});

tape( 'the function returns an array of NaNs if provided a rotational elimination parameter equal to NaN', function test(t) {
	var actual;
	var i;

	actual = srotmg( NaN, 1.0, 2.0, 3.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

	actual = srotmg( 1.0, NaN, 2.0, 3.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

    actual = srotmg( 1.0, 2.0, NaN, 3.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

    actual = srotmg( 1.0, 2.0, 3.0, NaN );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

	actual = srotmg( NaN, NaN, 3.0, 4.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

    actual = srotmg( 1.0, NaN, NaN, 3.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}

    actual = srotmg( 1.0, 2.0, NaN, NaN );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}
    actual = srotmg( NaN, 2.0, NaN, 3.0 );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}
    actual = srotmg( NaN, 1.0, 2.0, NaN );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}
    actual = srotmg( 1.0, NaN, 3.0, NaN );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnanf( actual[i] ), true, 'returns expected value' );
	}
	t.end();
});
